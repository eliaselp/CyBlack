"""
Django settings for CyBlack project.

Generated by 'django-admin startproject' using Django 5.1.7.
"""

from pathlib import Path
import os
import logging
import structlog
from structlog.dev import ConsoleRenderer

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Security settings
SECRET_KEY = 'django-insecure-i&9rgb%w$-8$n1ai^1br+7&0b3@59&6rez*3$i6ztq9-skk*7f'
DEBUG = True
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Index',
    'Administrador',
    'Api',
    'Lista_negra',
    'Ajustes',
    'MFA',
    'Entidad',
    'auditlog',
]

MIDDLEWARE = [
    'Index.middleware.FixedLoggingMiddleware',  # Debe ir primero
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_session_timeout.middleware.SessionTimeoutMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    'Index.middleware.AuthAndMFAMiddleware',
    'Index.middleware.AuditContextMiddleware',
]

ROOT_URLCONF = 'CyBlack.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CyBlack.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Havana'
USE_I18N = True
USE_TZ = True

# Static files
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'colectstatics'
STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
FILE_UPLOAD_MAX_MEMORY_SIZE = 209715200
DATA_UPLOAD_MAX_MEMORY_SIZE = 209715200

# Default primary key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session settings
SESSION_COOKIE_AGE = 3600
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# ==================== LOGGING CONFIGURATION ====================

# Request logging configuration
REQUEST_LOGGING_DATA_LOG_LEVEL = logging.INFO
REQUEST_LOGGING_MAX_BODY_LENGTH = 500
REQUEST_LOGGING_SENSITIVE_HEADERS = ['Authorization', 'Cookie']


# Agrega esta configuraci√≥n para request_logging
REQUEST_LOGGING_ENABLE_COLORIZE = False  # Desactiva colores para evitar problemas
REQUEST_LOGGING_HTTP_4XX_LOG_LEVEL = logging.WARNING
REQUEST_LOGGING_HTTP_5XX_LOG_LEVEL = logging.ERROR
REQUEST_LOGGING_DISABLE_COLORIZE = True  # Adicional para evitar problemas de formato


# settings.py
# Structlog configuration
structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.processors.format_exc_info,
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.processors.JSONRenderer(),
        },
        "console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(
                colors=True,
                force_colors=True,
                level_styles={
                    'critical': 'bold_red',
                    'error': 'red',
                    'warning': 'yellow',
                    'info': 'green',
                    'debug': 'white',
                }
            ),
        },
    },
    "handlers": {
        "security_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "logs/security.log",
            "formatter": "json",
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
            "encoding": "utf-8",
        },
        "audit_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "logs/audit.log",
            "formatter": "json",
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
            "encoding": "utf-8",
        },
        "errors_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "logs/errors.log",
            "formatter": "json",
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
            "level": "ERROR",
            "encoding": "utf-8",
        },
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console",
            "stream": "ext://sys.stdout",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "errors_file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["security_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        "security": {
            "handlers": ["security_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "audit": {
            "handlers": ["audit_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Monkey patch para request_logging si es necesario
try:
    from request_logging.middleware import LOGGING_SETTINGS_NAMES
    LOGGING_SETTINGS_NAMES['REQUEST_LOGGING_HTTP_4XX_LOG_LEVEL']['choices'].extend(['WARNING', 'WARN'])
    LOGGING_SETTINGS_NAMES['REQUEST_LOGGING_HTTP_5XX_LOG_LEVEL']['choices'].extend(['WARNING', 'WARN'])
except ImportError:
    pass