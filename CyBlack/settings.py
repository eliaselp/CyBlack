"""
Django settings for CyBlack project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i&9rgb%w$-8$n1ai^1br+7&0b3@59&6rez*3$i6ztq9-skk*7f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Index',
    'Administrador',
    'Api',
    'Lista_negra',
    'Ajustes',
    'MFA',
    'Entidad',
    #'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_session_timeout.middleware.SessionTimeoutMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    'Index.middleware.AuthAndMFAMiddleware',
    #'Index.middleware.UserActionLoggingMiddleware',

    #'core.middleware.audit_middleware.AuditMiddleware',
    #'core.middleware.security_headers.SecurityHeadersMiddleware',
    #'core.middleware.context_local_middleware.ContextLocalMiddleware',
]

ROOT_URLCONF = 'CyBlack.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'template'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CyBlack.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}





# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_DIRS = [BASE_DIR / 'static',]
STATIC_ROOT = BASE_DIR / 'colectstatics'
STATIC_URL = '/static/'
# Habilita la compresión y almacenamiento eficiente
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# settings.py

# Configuración para archivos multimedia
MEDIA_URL = '/media/'  # URL base para servir archivos subidos
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Ruta absoluta al directorio de almacenamiento

FILE_UPLOAD_MAX_MEMORY_SIZE = 209715200  # 200MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 209715200  # 200MB



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


SESSION_COOKIE_AGE = 3600  # 1 hora en segundos
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# Zona horaria de Cuba (Havana)
TIME_ZONE = 'America/Havana'  # ¡Ojo: se escribe "Havana", no "Habana"!

# Asegúrate de que USE_TZ esté en True para manejo correcto de zonas horarias
USE_TZ = True



#############################################################################
########## CONFIGURACION DE GESTION DE LOGS ###################################
#############################################################################
"""
import os
import platform
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler

# Directorio de logs
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR, mode=0o750)

# Detectar sistema operativo para syslog
IS_WINDOWS = platform.system() == 'Windows'


handlers = {
    'console': {
        'level': 'DEBUG',
        'filters': ['require_debug_true'],
        'class': 'logging.StreamHandler',
        'formatter': 'verbose'
    },
    'file_app': {
        'level': 'INFO',
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': os.path.join(LOG_DIR, 'application.log'),
        'maxBytes': 1024 * 1024 * 50,
        'backupCount': 10,
        'formatter': 'verbose',
        'delay': True,
    },
    'file_security': {
        'level': 'INFO',
        'class': 'logging.handlers.TimedRotatingFileHandler',
        'filename': os.path.join(LOG_DIR, 'security.log'),
        'when': 'midnight',
        'backupCount': 30,
        'formatter': 'security',
        'filters': ['user_context'],  # ✅ filtro añadido
        'delay': True,
    },
    'logstash': {
        'level': 'INFO',
        'class': 'logstash.TCPLogstashHandler',
        'host': 'logstash.example.com',
        'port': 5959,
        'version': 1,
        'message_type': 'django',
        'fqdn': False,
        'tags': ['django', 'production'],
        'filters': ['user_context'],  # ✅ filtro añadido
    },
    'sentry': {
        'level': 'ERROR',
        'class': 'sentry_sdk.integrations.logging.EventHandler',
        'formatter': 'json',
        'filters': ['user_context'],  # ✅ filtro añadido
    },
}

# Solo agregar syslog si NO es Windows
if not IS_WINDOWS:
    handlers['syslog'] = {
        'level': 'WARNING',
        'class': 'logging.handlers.SysLogHandler',
        'address': '/dev/log',
        'facility': 'local7',
        'formatter': 'verbose'
    }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'user_context': {
            '()': 'core.logging_filters.UserContextFilter',
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '''
                {
                    "timestamp": "%(asctime)s",
                    "level": "%(levelname)s",
                    "service": "django",
                    "host": "%(hostname)s",
                    "module": "%(module)s",
                    "function": "%(funcName)s",
                    "line": "%(lineno)d",
                    "message": "%(message)s",
                    "user": "%(user)s",
                    "ip": "%(ip)s",
                    "request_id": "%(request_id)s",
                    "session_id": "%(session_id)s"
                }
            '''
        },
        'security': {
            'format': '%(asctime)s | SECURITY | %(levelname)s | %(user)s | %(ip)s | %(action)s | %(message)s | Context: %(context)s'
        },
    },
    'handlers': handlers,
    'loggers': {
        '': {
            # Evitar usar syslog si no está definido (Windows)
            'handlers': ['console', 'file_app'] + (['syslog'] if 'syslog' in handlers else []),
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console', 'file_app'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['file_security', 'logstash'],
            'level': 'INFO',
            'propagate': False,
        },
        'audit': {
            # Agregar syslog solo si está disponible
            'handlers': ['file_security', 'logstash'] + (['syslog'] if 'syslog' in handlers else []),
            'level': 'INFO',
            'propagate': False,
        },
        'security': {
            'handlers': ['file_security', 'logstash'] + (['syslog'] if 'syslog' in handlers else []) + ['sentry'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}
"""